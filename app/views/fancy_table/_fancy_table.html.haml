:coffeescript
  (($) ->
    $.fn.jExpand = ->
      element = this
      $(element).find("tbody tr:even").addClass("collapsed")
      $(element).find("tbody tr:not(.collapsed)").hide()
      $(element).find("tbody tr:first-child").show()
      $(element).find("tbody tr.collapsed").click ->
        $(this).toggleClass("uncollapsed")
        $(this).next("tbody tr").toggle()
      $(element).find("tbody tr a").click (e) -> e.stopPropagation()
  )(jQuery)

  $ ->
    $('table.fancy_table.collapsible').jExpand()
:ruby
  throw "objects is required" unless defined? objects
  klass = objects.first.class
  headers ||= objects.fancy_table_headers


  title ||= klass.to_s.titleize.pluralize

  group_actions ||= []
  member_actions ||= {}
  actions ||= {}
  collapsible ||= false
  update_multiple_controller ||= controller.controller_name

  forkaminari ||=
    begin
      if defined?(Draper) && objects.is_a?(Draper::DecoratedEnumerableProxy)
        objects.instance_variable_get(:@wrapped_collection)
      else
        objects
      end
    end
  objects = objects.to_a #only do sql once

  params[:order_by] =~ /\A([^\s]+)(\s*desc)?\Z/
  sort_col  = $1
  sort_desc = !$2.blank?

  # note that defined? won't work yet on show_rows_per_page because we're
  # defining it here when it isn't defined.
  show_rows_per_page = objects.size >= 10 if show_rows_per_page.nil?

  # note that we're assuming that member_actions is going to be a hash otherwise
  if member_actions.is_a? Array
    member_actions = member_actions.map_hash { |action| [ action, action ] }
  end

  column_count = headers.count
  column_count += 1 if group_actions.present?
  column_count += 1 if member_actions.present?

= wrap_if group_actions.present?, :form_tag,
  { controller: update_multiple_controller,
    action: :update_multiple },
  { method: :put } do
  - if group_actions.present?
    %div
      - %w(order_by rows_per_page page).each do |param|
        %input{ type: 'hidden', value: param, name: params[param.to_sym] }
  %table.fancy_table{class: ('collapsible' if collapsible)}
    %caption
      %h2= title
      - if actions.present?
        .fancy_table_actions
          - actions.each do |text, target|
            = link_to text, target
          - if show_rows_per_page
            %form
              %input{ type: 'hidden', name: 'order_by', value: params[:order_by] }
              %select{ name: 'rows_per_page' }
                - rows_per_page_options.each do |row_count|
                  :ruby
                    params = { value: row_count }
                    params[:selected] = selected if row_count.to_s == params[:rows_per_page]
                  %option{ params }= row_count
              %input{ type: 'submit', value: 'Go' }
    - if objects.blank?
      %tbody
        %tr
          %td
            %p.no-results No Results
    - else
      %thead
        - if group_actions.present? # Empty header column for checkboxes
          %th
        - headers.each do |field, name|
          %th
            :ruby
              # Determine the sort order and add order indicators if this is the
              # header by which the objects are currently sorted.
              order =
                "#{field}#{( sort_col == field and sort_desc ) ? '' : ' desc'}"
              url =
                url_for rows_per_page: params[:rows_per_page], order_by: order
              name += ' ' + ( sort_desc ? '▼' : '▲' ) if (sort_col == field)
            = link_to name.titleize, url, :class => sort_col == field ? 'current' : nil
        - if member_actions.present? # Empty header column for member_actions
          %th
      %tbody
        - objects.each do |object|
          %tr
            - if group_actions.present?
              %td= check_box_tag "#{object.class.table_name.singularize}_ids[]", object.id
            - headers.each do |field, name|
              %td
                :ruby
                  value = object.send(field)
                - if (object.class.respond_to?(:default_order_column) && field.to_s == object.class.default_order_column)
                  = link_to_object object
                - else
                  :ruby
                    #field = field.to_s # allow symbols
                    # handle calling methods on fields
                    fields = field.split('.')
                    value = fields.inject(object) { |memo, field|
                      if memo.nil?
                        nil
                      else
                        if field.match /^(.*)=(.*)$/
                          c = memo.where( $1 => $2 ).first
                          if c.nil?
                            nil
                          else
                            decorator = "#{c.class.table_name.classify}Decorator"
                            if const_defined? decorator
                              decorator.constantize.decorate c
                            else
                              c
                            end
                          end
                        else
                          memo.send(field)
                        end
                      end
                    }
                  = link_to_object value
            - unless member_actions.blank?
              %td
                - member_actions.each do |text, action|
                  - if action.is_a? Proc
                    - href = action.call( object )
                  - else
                    - klass = object.class.table_name.singularize
                    - href = send( "#{action}_#{klass}_path", object )
                  = link_to text, href
          - if collapsible
            %tr
              %td{:colspan => headers.size}
                = render object
      - if group_actions.present? || forkaminari.respond_to?(:num_pages) && forkaminari.num_pages != 1
        - if forkaminari.respond_to?(:current_page) || group_actions.any?
          %tfoot
            - if forkaminari.respond_to? :current_page
              %tr
                %td{ colspan: column_count }= paginate forkaminari
            - if group_actions.any?
              %tr#actions
                %td{ colspan: column_count }
                  - group_actions.each do |action|
                    = submit_tag action, id: "#{ action.underscore }_button"
